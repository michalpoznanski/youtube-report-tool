try:
    import logging
    from fastapi import APIRouter, Request, Query
    from fastapi.responses import JSONResponse, HTMLResponse
    from fastapi.templating import Jinja2Templates
    from app.trend.services.csv_processor import get_trend_data
    from datetime import date
    import pandas as pd
    import os
    from pathlib import Path
    
    print("‚úÖ Wszystkie importy w trend router udane")
except ImportError as e:
    print(f"‚ùå B≈ÇƒÖd importu w trend router: {e}")
    import traceback
    traceback.print_exc()
    raise

log = logging.getLogger("trend")
templates = Jinja2Templates(directory="hook-boost-web/templates")
router = APIRouter(prefix="/trend", tags=["trend"])

def get_top_videos_from_csv(category_name: str, limit: int = 15):
    """
    Prosta funkcja do czytania pliku CSV i zwracania top wideo.
    """
    try:
        # ≈öcie≈ºka do katalogu raport√≥w - u≈ºyj ustawie≈Ñ aplikacji
        from ...config.settings import settings
        reports_dir = settings.reports_path
        
        if not reports_dir.exists():
            log.warning(f"Katalog raport√≥w nie istnieje: {reports_dir}")
            return []
        
        # Znajd≈∫ najnowszy plik CSV dla danej kategorii
        pattern = f"report_{category_name.upper()}_*.csv"
        csv_files = list(reports_dir.glob(pattern))
        
        if not csv_files:
            log.warning(f"Nie znaleziono plik√≥w CSV dla kategorii {category_name}")
            return []
        
        # We≈∫ najnowszy plik (sortuj po nazwie)
        latest_file = sorted(csv_files)[-1]
        log.info(f"U≈ºywam pliku: {latest_file}")
        
        # Wczytaj CSV
        df = pd.read_csv(latest_file)
        
        # Sprawd≈∫ jakie kolumny sƒÖ dostƒôpne
        log.info(f"Dostƒôpne kolumny: {list(df.columns)}")
        
        # Znajd≈∫ kolumnƒô z liczbƒÖ wy≈õwietle≈Ñ (mo≈ºe byƒá View_Count, views_today, etc.)
        view_column = None
        for col in ['views_today', 'View_Count', 'views', 'View_Count_Today']:
            if col in df.columns:
                view_column = col
                break
        
        if not view_column:
            log.warning(f"Nie znaleziono kolumny z wy≈õwietleniami w {latest_file}")
            return []
        
        # Znajd≈∫ kolumnƒô z tytu≈Çem
        title_column = None
        for col in ['title', 'Title', 'video_title']:
            if col in df.columns:
                title_column = col
                break
        
        if not title_column:
            log.warning(f"Nie znaleziono kolumny z tytu≈Çem w {latest_file}")
            return []
        
        # Znajd≈∫ kolumnƒô z nazwƒÖ kana≈Çu
        channel_column = None
        for col in ['channel', 'Channel_Name', 'channel_name']:
            if col in df.columns:
                channel_column = col
                break
        
        # Sortuj po wy≈õwietleniach i we≈∫ top
        df_sorted = df.sort_values(by=view_column, ascending=False).head(limit)
        
        # Przygotuj dane do wy≈õwietlenia
        top_videos = []
        for _, row in df_sorted.iterrows():
            video_data = {
                'title': str(row.get(title_column, 'Brak tytu≈Çu')),
                'views': int(row.get(view_column, 0)),
                'channel': str(row.get(channel_column, 'Nieznany kana≈Ç')) if channel_column else 'Nieznany kana≈Ç'
            }
            top_videos.append(video_data)
        
        log.info(f"Pomy≈õlnie wczytano {len(top_videos)} wideo z {latest_file}")
        return top_videos
        
    except Exception as e:
        log.error(f"B≈ÇƒÖd podczas wczytywania CSV: {e}")
        return []

@router.get("/trends/{category_name}", response_class=HTMLResponse)
async def get_category_trends(request: Request, category_name: str):
    """
    Dynamiczny endpoint do wy≈õwietlania trend√≥w dla danej kategorii.
    U≈ºywa nowego serwisu csv_processor do pobierania danych.
    """
    try:
        # Pobierz dane trend√≥w u≈ºywajƒÖc nowego serwisu
        videos = get_trend_data(category=category_name, report_date=date.today())
        
        log.info(f"Pobrano {len(videos)} wideo dla kategorii {category_name}")
        
        # Renderuj szablon simple_report.html z nowymi danymi
        return templates.TemplateResponse(
            "trend/simple_report.html",  # Nowy, prosty szablon
            {
                "request": request, 
                "category_name": category_name, 
                "videos": videos,
                "category": category_name,
                "report_date": date.today().strftime("%Y-%m-%d")
            }
        )
        
    except Exception as e:
        log.error(f"B≈ÇƒÖd podczas pobierania trend√≥w dla kategorii {category_name}: {e}")
        
        # W przypadku b≈Çƒôdu zwr√≥ƒá szablon z pustymi danymi
        return templates.TemplateResponse(
            "trend/simple_report.html",
            {
                "request": request, 
                "category_name": category_name, 
                "videos": [],
                "category": category_name,
                "report_date": date.today().strftime("%Y-%m-%d"),
                "error": str(e)
            }
        )

@router.get("/local-trends/{category_name}", response_class=HTMLResponse)
async def get_local_trends_page(request: Request, category_name: str):
    """
    Strona HTML wy≈õwietlajƒÖca top 15 najpopularniejszych wideo z pliku CSV.
    """
    try:
        log.info(f"Wy≈õwietlanie top wideo dla kategorii {category_name}")
        
        # Pobierz top 15 wideo bezpo≈õrednio z pliku CSV
        top_videos = get_top_videos_from_csv(category_name, limit=15)
        
        # Renderuj szablon
        return templates.TemplateResponse(
            "trend/local_trends.html",
            {
                "request": request,
                "category": category_name,
                "top_videos": top_videos,
                "current_date": date.today().strftime("%Y-%m-%d"),
                "total_videos": len(top_videos)
            }
        )
        
    except Exception as e:
        log.error(f"B≈ÇƒÖd podczas wy≈õwietlania top wideo dla {category_name}: {e}")
        
        return templates.TemplateResponse(
            "trend/local_trends.html",
            {
                "request": request,
                "category": category_name,
                "top_videos": [],
                "error": str(e),
                "current_date": date.today().strftime("%Y-%m-%d"),
                "total_videos": 0
            }
        )

@router.get("/rankings/{category_name}", response_class=HTMLResponse)
async def get_category_rankings(request: Request, category_name: str):
    """
    Wy≈õwietla ranking top 10 film√≥w dla danej kategorii.
    U≈ªYWA NOWEGO SYSTEMU RankingAnalyzer zamiast starego ranking_manager.
    """
    try:
        print(f"üîÑ Stary endpoint /rankings/{category_name} - przekierowujƒô do nowego systemu...")
        
        # PRZEKIERUJ DO NOWEGO SYSTEMU zamiast u≈ºywaƒá starego ranking_manager
        from datetime import date
        import json
        from pathlib import Path
        from app.config.settings import settings
        from app.trend.services.ranking_analyzer import RankingAnalyzer
        
        print(f"üîÑ U≈ºywam nowego systemu RankingAnalyzer dla {category_name}...")
        
        base_path = settings.reports_path
        today_str = date.today().strftime("%Y-%m-%d")
        ranking_path = base_path / f"ranking_{category_name.upper()}_{today_str}.json"
        
        print(f"üìÅ Szukam rankingu w: {ranking_path}")
        
        ranking_data = {"shorts": [], "longform": [], "error": "Brak rankingu"}
        if ranking_path.exists():
            print(f"‚úÖ Znaleziono ranking: {ranking_path}")
            with open(ranking_path, 'r', encoding='utf-8') as f:
                ranking_data = json.load(f)
            print(f"üìä Wczytano ranking: {len(ranking_data.get('shorts', []))} shorts, {len(ranking_data.get('longform', []))} longform")
        else:
            print(f"‚ö†Ô∏è Brak rankingu dla {category_name} z dzisiaj: {ranking_path}")
            # Spr√≥buj znale≈∫ƒá najnowszy dostƒôpny ranking
            pattern = f"ranking_{category_name.upper()}_*.json"
            ranking_files = list(base_path.glob(pattern))
            if ranking_files:
                latest_ranking = sorted(ranking_files)[-1]
                print(f"üìÅ U≈ºywam najnowszego dostƒôpnego rankingu: {latest_ranking}")
                with open(latest_ranking, 'r', encoding='utf-8') as f:
                    ranking_data = json.load(f)
                today_str = latest_ranking.stem.split('_')[-1]  # WyciƒÖgnij datƒô z nazwy pliku
            else:
                print(f"‚ùå Brak jakichkolwiek ranking√≥w dla {category_name}")
                ranking_data = {"shorts": [], "longform": [], "error": "Brak ranking√≥w"}
        
        print(f"‚úÖ Zwracam dane dla {category_name}: {len(ranking_data.get('shorts', []))} shorts, {len(ranking_data.get('longform', []))} longform")
        
        # U≈ºyj tego samego szablonu co nowy system
        return templates.TemplateResponse(
            "trend/rankings.html",
            {
                "request": request,
                "category_name": category_name.capitalize(),
                "ranking": ranking_data,
                "summary": {
                    "category": category_name,
                    "last_updated": ranking_data.get('last_updated'),
                    "shorts_count": len(ranking_data.get('shorts', [])),
                    "longform_count": len(ranking_data.get('longform', [])),
                    "total_videos": ranking_data.get('total_videos_analyzed', 0)
                }
            }
        )
        
    except Exception as e:
        print(f"‚ùå B≈ÇƒÖd w starym endpoincie dla {category_name}: {e}")
        log.error(f"B≈ÇƒÖd podczas pobierania rankingu dla kategorii {category_name}: {e}")
        import traceback
        traceback.print_exc()
        
        return templates.TemplateResponse(
            "trend/rankings.html",
            {
                "request": request,
                "category_name": category_name.capitalize(),
                "report_date": "B≈ÇƒÖd",
                "ranking": {"shorts": [], "longform": [], "error": str(e)},
                "summary": {"error": str(e)}
            }
        )

@router.post("/rankings/{category_name}/clear")
async def clear_category_ranking(request: Request, category_name: str):
    """
    Czy≈õci ranking dla danej kategorii, wymuszajƒÖc regeneracjƒô z nowƒÖ logikƒÖ.
    """
    try:
        print(f"üîÑ Czyszczenie rankingu dla {category_name} - u≈ºywam nowego systemu...")
        
        # U≈ªYWAJ NOWEGO SYSTEMU zamiast starego ranking_manager
        from pathlib import Path
        from app.config.settings import settings
        
        base_path = settings.reports_path
        
        # Usu≈Ñ wszystkie pliki ranking√≥w dla tej kategorii
        pattern = f"ranking_{category_name.upper()}_*.json"
        ranking_files = list(base_path.glob(pattern))
        
        deleted_count = 0
        for ranking_file in ranking_files:
            try:
                ranking_file.unlink()
                deleted_count += 1
                print(f"üóëÔ∏è Usuniƒôto: {ranking_file.name}")
            except Exception as e:
                print(f"‚ö†Ô∏è B≈ÇƒÖd podczas usuwania {ranking_file.name}: {e}")
        
        print(f"‚úÖ Usuniƒôto {deleted_count} plik√≥w ranking√≥w dla {category_name}")
        
        return {
            "message": f"Ranking dla kategorii {category_name} zosta≈Ç wyczyszczony",
            "category": category_name,
            "status": "cleared",
            "deleted_files": deleted_count
        }
            
    except Exception as e:
        print(f"‚ùå B≈ÇƒÖd podczas czyszczenia rankingu dla {category_name}: {e}")
        log.error(f"B≈ÇƒÖd podczas czyszczenia rankingu dla {category_name}: {e}")
        return {
            "message": f"B≈ÇƒÖd podczas czyszczenia rankingu: {str(e)}",
            "category": category_name,
            "status": "error"
        }

@router.post("/rankings/{category_name}/regenerate")
async def regenerate_category_ranking(request: Request, category_name: str):
    """
    Regeneruje ranking dla danej kategorii u≈ºywajƒÖc najnowszych danych CSV i nowej logiki.
    """
    try:
        print(f"üîÑ Regeneracja rankingu dla {category_name} - u≈ºywam nowego systemu...")
        
        # U≈ªYWAJ NOWEGO SYSTEMU RankingAnalyzer
        from app.trend.services.ranking_analyzer import RankingAnalyzer
        
        # Utw√≥rz instancjƒô nowego analizatora
        analyzer = RankingAnalyzer()
        
        # Uruchom analizƒô dla kategorii
        success = analyzer.run_analysis_for_category(category_name)
        
        if success:
            return {
                "message": f"Ranking dla kategorii {category_name} zosta≈Ç zregenerowany pomy≈õlnie",
                "category": category_name,
                "status": "regenerated",
                "method": "new_ranking_analyzer"
            }
        else:
            return {
                "message": f"B≈ÇƒÖd podczas regeneracji rankingu dla {category_name}",
                "category": category_name,
                "status": "error",
                "method": "new_ranking_analyzer"
            }
            
    except Exception as e:
        print(f"‚ùå B≈ÇƒÖd podczas regeneracji rankingu dla {category_name}: {e}")
        log.error(f"B≈ÇƒÖd podczas regeneracji rankingu dla {category_name}: {e}")
        return {
            "message": f"B≈ÇƒÖd podczas regeneracji rankingu: {str(e)}",
            "category": category_name,
            "status": "error"
        }

@router.get("/modern/{category_name}")
async def get_modern_category_trends(request: Request, category_name: str):
    """
    NOWY endpoint do wy≈õwietlania trend√≥w dla danej kategorii.
    U≈ºywa nowego systemu RankingAnalyzer i plik√≥w JSON.
    """
    try:
        from datetime import date
        import json
        from pathlib import Path
        from app.config.settings import settings
        
        print(f"üîÑ Nowy endpoint /modern/{category_name} - wczytujƒô ranking...")
        
        # U≈ºyj naszych ustawie≈Ñ zamiast sztywnej ≈õcie≈ºki
        base_path = settings.reports_path
        today_str = date.today().strftime("%Y-%m-%d")
        ranking_path = base_path / f"ranking_{category_name.upper()}_{today_str}.json"
        
        print(f"üìÅ Szukam rankingu w: {ranking_path}")
        
        ranking_data = {"shorts": [], "longform": [], "error": "Brak rankingu"}
        if ranking_path.exists():
            print(f"‚úÖ Znaleziono ranking: {ranking_path}")
            with open(ranking_path, 'r', encoding='utf-8') as f:
                ranking_data = json.load(f)
            print(f"üìä Wczytano ranking: {len(ranking_data.get('shorts', []))} shorts, {len(ranking_data.get('longform', []))} longform")
        else:
            print(f"‚ö†Ô∏è Brak rankingu dla {category_name} z dzisiaj: {ranking_path}")
            # Spr√≥buj znale≈∫ƒá najnowszy dostƒôpny ranking
            pattern = f"ranking_{category_name.upper()}_*.json"
            ranking_files = list(base_path.glob(pattern))
            if ranking_files:
                latest_ranking = sorted(ranking_files)[-1]
                print(f"üìÅ U≈ºywam najnowszego dostƒôpnego rankingu: {latest_ranking}")
                with open(latest_ranking, 'r', encoding='utf-8') as f:
                    ranking_data = json.load(f)
                today_str = latest_ranking.stem.split('_')[-1]  # WyciƒÖgnij datƒô z nazwy pliku
            else:
                print(f"‚ùå Brak jakichkolwiek ranking√≥w dla {category_name}")
                ranking_data = {"shorts": [], "longform": [], "error": "Brak ranking√≥w"}
        
        print(f"‚úÖ Zwracam dane dla {category_name}: {len(ranking_data.get('shorts', []))} shorts, {len(ranking_data.get('longform', []))} longform")
        
        return templates.TemplateResponse(
            "trend/rankings.html",  # U≈ºyj starego szablonu z piƒôknymi tabelami
            {
                "request": request,
                "category_name": category_name.capitalize(),
                "ranking": ranking_data,  # Dane w formacie starego systemu
                "summary": {
                    "category": category_name,
                    "last_updated": ranking_data.get('last_updated'),
                    "shorts_count": len(ranking_data.get('shorts', [])),
                    "longform_count": len(ranking_data.get('longform', [])),
                    "total_videos": ranking_data.get('total_videos_analyzed', 0)
                }
            }
        )
        
    except Exception as e:
        print(f"‚ùå B≈ÇƒÖd w nowym endpoincie dla {category_name}: {e}")
        log.error(f"B≈ÇƒÖd podczas pobierania nowoczesnego rankingu dla kategorii {category_name}: {e}")
        import traceback
        traceback.print_exc()
        
        # W przypadku b≈Çƒôdu zwr√≥ƒá szablon z pustymi danymi
        return templates.TemplateResponse(
            "trend/modern_ranking.html",
            {
                "request": request,
                "category_name": category_name.capitalize(),
                "report_date": "B≈ÇƒÖd",
                "ranking": {"shorts": [], "longform": [], "error": str(e)}
            }
        )
