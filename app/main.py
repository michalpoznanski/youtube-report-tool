from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.responses import HTMLResponse
import logging
from pathlib import Path
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Import z obs≈ÇugƒÖ b≈Çƒôd√≥w
try:
    from .config import settings
    from .api import router
    from .scheduler import TaskScheduler
except ImportError as e:
    print(f"B≈ÇƒÖd importu: {e}")
    # Fallback settings
    class FallbackSettings:
        log_level = "INFO"
        log_file = "logs/app.log"
        allowed_origins = ["*"]
        def create_directories(self):
            Path("logs").mkdir(exist_ok=True)
    
    settings = FallbackSettings()
    router = None
    TaskScheduler = None

# Konfiguracja logowania
try:
    logging.basicConfig(
        level=getattr(logging, settings.log_level),
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(settings.log_file),
            logging.StreamHandler()
        ]
    )
except Exception:
    # Fallback - tylko console logging
    logging.basicConfig(
        level=getattr(logging, settings.log_level),
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler()
        ]
    )

logger = logging.getLogger(__name__)

# Tworzenie aplikacji FastAPI
app = FastAPI(
    title="Hook Boost Web",
    description="Aplikacja webowa do raportowania danych z kana≈Ç√≥w YouTube",
    version="1.0.0"
)

# Integracja modu≈Çu Trend
import os, logging
logger = logging.getLogger(__name__)

if os.getenv("ENABLE_TREND", "false").lower() == "true":
    try:
        from app.trend.routers.router import router as trend_router
        logger.info("[BOOT] Trend router imported successfully")
        app.include_router(trend_router, prefix="")
        logger.info("[BOOT] Trend router included in app ‚úÖ")
        logger.info("[BOOT] Trend module enabled ‚úÖ")
    except Exception as e:
        logger.exception("[BOOT] Trend module failed ‚ùå: %s", e)
else:
    logger.info("[BOOT] Trend module disabled (ENABLE_TREND!=true)")

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.allowed_origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Statyczne pliki
try:
    app.mount("/static", StaticFiles(directory="static"), name="static")
except RuntimeError:
    # Je≈õli katalog static nie istnieje, pomi≈Ñ montowanie
    pass

# Templates
templates = Jinja2Templates(directory="templates")

# Scheduler
scheduler = TaskScheduler() if TaskScheduler else None

# Upewnij siƒô, ≈ºe dane sƒÖ za≈Çadowane przed startem API
if scheduler and scheduler.state_manager:
    print("üîÑ Wymuszanie za≈Çadowania danych przed startem API...")
    scheduler.state_manager.load_all_data()
    print("‚úÖ Dane za≈Çadowane przed startem API")


@app.on_event("startup")
async def startup_event():
    """Event uruchamiany przy starcie aplikacji"""
    try:
        logger.info("Uruchamianie aplikacji Hook Boost Web...")
        
        # Utw√≥rz wymagane katalogi
        settings.create_directories()
        
        # Uruchom scheduler je≈õli dostƒôpny
        if scheduler:
            scheduler.start()
        
        logger.info("Aplikacja uruchomiona pomy≈õlnie!")
        
    except Exception as e:
        logger.error(f"B≈ÇƒÖd podczas uruchamiania aplikacji: {e}")
        # Nie rzucaj b≈Çƒôdu - pozw√≥l aplikacji siƒô uruchomiƒá


@app.on_event("shutdown")
async def shutdown_event():
    """Event uruchamiany przy zatrzymaniu aplikacji"""
    try:
        logger.info("Zatrzymywanie aplikacji...")
        
        # Zatrzymaj scheduler je≈õli dostƒôpny
        if scheduler:
            scheduler.stop()
        
        logger.info("Aplikacja zatrzymana pomy≈õlnie!")
        
    except Exception as e:
        logger.error(f"B≈ÇƒÖd podczas zatrzymywania aplikacji: {e}")


# Dodaj router API je≈õli dostƒôpny
if router:
    # Przeka≈º instancjƒô schedulera do API
    try:
        from .api.routes import set_task_scheduler
        if scheduler:
            set_task_scheduler(scheduler)
    except ImportError:
        pass
    
    app.include_router(router, prefix="/api/v1", tags=["api"])


@app.get("/", response_class=HTMLResponse)
async def root(request: Request):
    """Strona g≈Ç√≥wna aplikacji Hook Boost"""
    return templates.TemplateResponse("home/index.html", {"request": request})


@app.get("/console", response_class=HTMLResponse)
async def console(request: Request):
    """Stary panel administracyjny - pe≈Çna funkcjonalno≈õƒá zarzƒÖdzania"""
    return templates.TemplateResponse("index.html", {"request": request})


@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {
        "status": "healthy",
        "version": "1.0.0",
        "scheduler_running": scheduler.scheduler.running if scheduler else False
    }


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "app.main:app",
        host=settings.host,
        port=settings.port,
        reload=settings.debug
    ) 