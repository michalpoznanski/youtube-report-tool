#!/usr/bin/env python3
"""
UPRASZCZONY SYSTEM RAPORT√ìW - WARSZTAT
Cel: Czyste dane CSV bez ekstrakcji nazwisk, proste rozpoznawanie pokoj√≥w
"""

import os
import sys
import json
import glob
import time
from datetime import datetime, timezone, timedelta
from typing import List, Dict, Optional

# Dodaj ≈õcie≈ºkƒô do g≈Ç√≥wnego katalogu
sys.path.append('.')

class SimpleRaportSystem:
    """Uproszczony system raport√≥w - czyste dane CSV"""
    
    def __init__(self):
        self.api_key = os.getenv('YOUTUBE_API_KEY')
        if not self.api_key:
            raise ValueError("Brak YOUTUBE_API_KEY")
        
        # Proste mapowanie pokoj√≥w (nie AI!)
        self.room_categories = {
            'polityka': 'politics',
            'politics': 'politics',
            'polityk': 'politics',
            'rzƒÖd': 'politics',
            'sejm': 'politics',
            'senat': 'politics',
            'wybory': 'politics',
            
            'showbiz': 'showbiz',
            'gwiazdy': 'showbiz',
            'celebryci': 'showbiz',
            'muzyka': 'showbiz',
            'film': 'showbiz',
            'telewizja': 'showbiz',
            'ciekawostki-film': 'showbiz',
            
            'motoryzacja': 'motoryzacja',
            'samochody': 'motoryzacja',
            'auta': 'motoryzacja',
            'cars': 'motoryzacja',
            
            'podcast': 'podcast',
            'audio': 'podcast',
            'radio': 'podcast'
        }
        
        # Domy≈õlna kategoria
        self.default_category = 'showbiz'
        
        # Ustawienia zbierania danych
        self.days_back = 7  # Zawsze 7 dni
        self.max_results_per_channel = 50  # Do sprawdzenia dat
        
        # Za≈Çaduj konfiguracjƒô kana≈Ç√≥w
        self.channels_config = self.load_channels_config()
    
    def load_channels_config(self) -> Dict:
        """≈Åaduje konfiguracjƒô kana≈Ç√≥w z pliku"""
        try:
            with open('channels_config.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            print("‚ö†Ô∏è Brak channels_config.json - u≈ºywam pustej konfiguracji")
            return {}
    
    def detect_category_from_room(self, room_name: str) -> str:
        """Proste wykrywanie kategorii na podstawie nazwy pokoju"""
        room_lower = room_name.lower()
        
        # Sprawd≈∫ mapowanie
        for room_keyword, category in self.room_categories.items():
            if room_keyword in room_lower:
                return category
        
        # Domy≈õlnie showbiz
        return self.default_category
    
    def get_channels_for_category(self, category: str) -> List[str]:
        """Pobiera listƒô kana≈Ç√≥w dla danej kategorii"""
        # Mapowanie kategorii na klucze w config
        category_mapping = {
            'politics': 'polityka',
            'showbiz': 'showbiz',
            'motoryzacja': 'motoryzacja',
            'podcast': 'podcast'
        }
        
        config_key = category_mapping.get(category, 'showbiz')
        
        if 'channels' in self.channels_config and config_key in self.channels_config['channels']:
            channels = self.channels_config['channels'][config_key]
            # WyciƒÖgnij tylko ID/handles kana≈Ç√≥w
            return [ch['id'] if isinstance(ch, dict) else ch for ch in channels]
        
        print(f"‚ö†Ô∏è Brak kana≈Ç√≥w dla kategorii: {category}")
        return []
    
    def check_existing_report(self, category: str) -> Optional[str]:
        """Sprawdza czy istnieje raport z ostatnich 7 dni"""
        reports_dir = f'reports/{category}'
        
        if not os.path.exists(reports_dir):
            return None
        
        # Znajd≈∫ pliki CSV z ostatnich 7 dni
        csv_files = glob.glob(f'{reports_dir}/youtube_data_{category}_*.csv')
        
        if not csv_files:
            return None
        
        # Sprawd≈∫ najnowszy plik
        latest_file = max(csv_files, key=os.path.getctime)
        file_age_hours = (time.time() - os.path.getctime(latest_file)) / 3600
        
        if file_age_hours < 168:  # 7 dni = 168 godzin
            return latest_file
        
        return None
    
    def collect_data(self, room_name: str, dry_run: bool = True) -> Dict:
        """G≈Ç√≥wna funkcja zbierania danych"""
        
        # 1. Wykryj kategoriƒô
        category = self.detect_category_from_room(room_name)
        print(f"üè∑Ô∏è Wykryta kategoria: {category}")
        
        # 2. Sprawd≈∫ istniejƒÖcy raport
        existing_report = self.check_existing_report(category)
        if existing_report:
            print(f"‚ö†Ô∏è Istnieje raport: {os.path.basename(existing_report)}")
            return {
                'success': False,
                'error': 'Raport ju≈º istnieje',
                'existing_report': existing_report
            }
        
        # 3. Pobierz kana≈Çy
        channels = self.get_channels_for_category(category)
        if not channels:
            return {
                'success': False,
                'error': f'Brak kana≈Ç√≥w dla kategorii: {category}'
            }
        
        print(f"üì∫ Kana≈Çy do sprawdzenia: {len(channels)}")
        
        if dry_run:
            return {
                'success': True,
                'dry_run': True,
                'category': category,
                'channels_count': len(channels),
                'days': self.days_back,
                'message': f'DRY RUN: Zebra≈Çbym dane z {len(channels)} kana≈Ç√≥w dla {category}'
            }
        
        # TODO: Rzeczywiste zbieranie danych
        # U≈ºyj smart_date_collector z warsztatu
        
        return {
            'success': True,
            'category': category,
            'channels': channels,
            'message': f'Rozpoczynam zbieranie danych dla {category}'
        }


# TESTY
if __name__ == "__main__":
    print("üß™ TEST UPRASZCZONEGO SYSTEMU RAPORT√ìW")
    print("=" * 50)
    
    try:
        system = SimpleRaportSystem()
        
        # Test 1: Wykrywanie kategorii
        test_rooms = [
            'polityka-2024',
            'showbiz-gwiazdy',
            'motoryzacja-samochody',
            'nieznany-pokoj'
        ]
        
        print("\nüîç TEST WYKRYWANIA KATEGORII:")
        for room in test_rooms:
            category = system.detect_category_from_room(room)
            print(f"  {room} ‚Üí {category}")
        
        # Test 2: Pobieranie kana≈Ç√≥w
        print("\nüì∫ TEST POBIERANIA KANA≈Å√ìW:")
        for category in ['politics', 'showbiz', 'motoryzacja']:
            channels = system.get_channels_for_category(category)
            print(f"  {category}: {len(channels)} kana≈Ç√≥w")
        
        # Test 3: Dry run
        print("\nüß™ TEST DRY RUN:")
        result = system.collect_data('polityka-test', dry_run=True)
        print(f"  Wynik: {result}")
        
        print("\n‚úÖ WSZYSTKIE TESTY ZALICZONE!")
        
    except Exception as e:
        print(f"‚ùå B≈ÅƒÑD: {e}")
        sys.exit(1) 