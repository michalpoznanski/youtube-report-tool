#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üîç QUOTA ANALYZER - Analiza koszt√≥w !≈õled≈∫
==========================================

Cel: Zrozumieƒá dok≈Çadnie ile kosztuje ka≈ºda operacja w !≈õled≈∫
"""

class QuotaAnalyzer:
    """Analizuje koszty quota dla r√≥≈ºnych operacji !≈õled≈∫"""
    
    def analyze_sledz_costs(self):
        """Analizuje koszty r√≥≈ºnych scenariuszy !≈õled≈∫"""
        
        print("üîç ANALIZA KOSZT√ìW !≈öLED≈π")
        print("=" * 50)
        
        scenarios = [
            {
                "name": "Gotowy Channel ID",
                "example": "UCShUU9VW-unGNHC-3XMUSmQ",
                "description": "Link z gotowym Channel ID",
                "api_calls": [],
                "quota_cost": 0,
                "reason": "Nie wymaga zapyta≈Ñ do API - ID ju≈º znane"
            },
            {
                "name": "@handle",
                "example": "@swiatgwiazd",
                "description": "Link z @handle",
                "api_calls": ["channels.list (forUsername)"],
                "quota_cost": 1,
                "reason": "1 zapytanie do channels API aby znale≈∫ƒá Channel ID"
            },
            {
                "name": "Link do filmu",
                "example": "https://youtube.com/watch?v=dQw4w9WgXcQ",
                "description": "Link do konkretnego filmu",
                "api_calls": ["videos.list", "channels.list"],
                "quota_cost": 2,
                "reason": "1 zapytanie o film + 1 zapytanie o kana≈Ç w≈Ça≈õciciela"
            },
            {
                "name": "/c/nazwa",
                "example": "https://youtube.com/c/swiatgwiazd",
                "description": "Link z niestandardowƒÖ nazwƒÖ",
                "api_calls": ["search.list"],
                "quota_cost": 100,
                "reason": "Kosztowne search query - nale≈ºy unikaƒá!"
            }
        ]
        
        for scenario in scenarios:
            print(f"\nüìã **{scenario['name']}**")
            print(f"   Przyk≈Çad: {scenario['example']}")
            print(f"   Opis: {scenario['description']}")
            print(f"   API Calls: {', '.join(scenario['api_calls']) if scenario['api_calls'] else 'Brak'}")
            print(f"   üí∞ Koszt: {scenario['quota_cost']} quota")
            print(f"   üìù Pow√≥d: {scenario['reason']}")
        
        print(f"\nüéØ **PODSUMOWANIE:**")
        print(f"   ‚Ä¢ Najta≈Ñsze: Gotowe Channel ID (0 quota)")
        print(f"   ‚Ä¢ Akceptowalne: @handle (1 quota)")
        print(f"   ‚Ä¢ Drogie: Linki film√≥w (2 quota)")
        print(f"   ‚Ä¢ UNIKAƒÜ: /c/nazwa (100 quota!)")
        
        return scenarios
    
    def analyze_batch_costs(self):
        """Analizuje koszty dodawania wielu kana≈Ç√≥w jednocze≈õnie"""
        
        print("\n" + "=" * 50)
        print("üî¢ ANALIZA KOSZT√ìW WSADOWYCH")
        print("=" * 50)
        
        examples = [
            {
                "links": 5,
                "channel_ids": 3,
                "handles": 2,
                "videos": 0,
                "total_cost": 3 * 0 + 2 * 1 + 0 * 2,
                "breakdown": "3√ó0 + 2√ó1 + 0√ó2 = 2 quota"
            },
            {
                "links": 10,
                "channel_ids": 5,
                "handles": 3,
                "videos": 2,
                "total_cost": 5 * 0 + 3 * 1 + 2 * 2,
                "breakdown": "5√ó0 + 3√ó1 + 2√ó2 = 7 quota"
            }
        ]
        
        for i, example in enumerate(examples, 1):
            print(f"\nüìä **Przyk≈Çad {i}:**")
            print(f"   ≈ÅƒÖcznie link√≥w: {example['links']}")
            print(f"   - Channel ID: {example['channel_ids']} (√ó0 quota)")
            print(f"   - @handles: {example['handles']} (√ó1 quota)")
            print(f"   - Filmy: {example['videos']} (√ó2 quota)")
            print(f"   üí∞ ≈ÅƒÖczny koszt: {example['total_cost']} quota")
            print(f"   üìù Kalkulacja: {example['breakdown']}")

if __name__ == "__main__":
    analyzer = QuotaAnalyzer()
    analyzer.analyze_sledz_costs()
    analyzer.analyze_batch_costs()
    
    print("\n" + "=" * 50)
    print("üí° **WNIOSKI DLA INTERFEJSU:**")
    print("   1. Poka≈º koszt quota przed wykonaniem")
    print("   2. Ostrze≈º przed kosztownymi operacjami")
    print("   3. Wy≈õwietl tylko liczbƒô kana≈Ç√≥w (nie nazwy)")
    print("   4. Grupuj wyniki wed≈Çug typu operacji") 