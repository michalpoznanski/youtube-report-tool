#!/usr/bin/env python3
"""
SMART AUTO SYNC - INTELIGENTNY SYSTEM
=====================================

≈ÅƒÖczy automatycznƒÖ synchronizacjƒô z kontrolƒÖ Railway
"""

import time
import os
from pathlib import Path
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from railway_sync_v2 import RailwaySyncV2
from railway_controller import RailwayController

class SmartAutoSync(FileSystemEventHandler):
    """Inteligentny system auto sync z kontrolƒÖ Railway"""
    
    def __init__(self, github_token, railway_token=None):
        self.github_token = github_token
        self.railway_token = railway_token
        
        # Inicjalizuj komponenty
        self.sync = RailwaySyncV2(github_token=github_token)
        self.railway = RailwayController(railway_token=railway_token)
        
        self.last_sync = 0
        self.sync_cooldown = 30  # sekundy miƒôdzy syncami
        self.auto_restart = True  # automatyczny restart po sync
        
        # Pliki do monitorowania
        self.watch_files = [
            "main.py",
            "raport_system_workshop.py", 
            "sledz_system.py",
            "quota_manager.py",
            "channels_config.json",
            "requirements.txt",
            "Dockerfile",
            "railway.json",
            "scheduler.py"
        ]
        
        print("üß† Smart Auto Sync uruchomiony!")
        print(f"üìÅ Monitorujƒô: {len(self.watch_files)} plik√≥w")
        print(f"‚è±Ô∏è Cooldown: {self.sync_cooldown} sekund")
        print(f"üîÑ Auto restart: {'TAK' if self.auto_restart else 'NIE'}")
    
    def on_modified(self, event):
        """Gdy plik zostanie zmodyfikowany"""
        if event.is_directory:
            return
        
        file_name = Path(event.src_path).name
        if file_name in self.watch_files:
            current_time = time.time()
            
            # Sprawd≈∫ cooldown
            if current_time - self.last_sync < self.sync_cooldown:
                print(f"‚è≥ Cooldown aktywny, pomijam sync dla {file_name}")
                return
            
            print(f"\nüîÑ Wykryto zmianƒô: {file_name}")
            print("üöÄ Inteligentna synchronizacja...")
            
            try:
                # 1. Sync z GitHub
                print("üì§ Synchronizujƒô z GitHub...")
                success = self.sync.quick_sync(file_name, f"Smart auto sync: {file_name}")
                
                if success:
                    print(f"‚úÖ Sync zako≈Ñczony dla {file_name}")
                    self.last_sync = current_time
                    
                    # 2. Automatyczny restart Railway (je≈õli w≈ÇƒÖczony)
                    if self.auto_restart:
                        print("üöÇ Restartujƒô Railway serwer...")
                        restart_success = self.railway.restart_service()
                        
                        if restart_success:
                            print("‚úÖ Railway serwer zrestartowany!")
                        else:
                            print("‚ö†Ô∏è B≈ÇƒÖd restartu Railway (mo≈ºe brak tokenu)")
                    else:
                        print("‚è∏Ô∏è Auto restart wy≈ÇƒÖczony")
                        
                else:
                    print(f"‚ùå B≈ÇƒÖd sync dla {file_name}")
                    
            except Exception as e:
                print(f"‚ùå B≈ÇƒÖd podczas inteligentnej sync: {e}")
    
    def manual_sync_and_restart(self, file_name=None):
        """Rƒôczna synchronizacja i restart"""
        print("üîÑ Rƒôczna synchronizacja i restart...")
        
        try:
            # 1. Sync
            if file_name:
                success = self.sync.quick_sync(file_name, f"Manual sync: {file_name}")
            else:
                success = self.sync.sync_to_railway_auto("Manual full sync")
            
            if success:
                print("‚úÖ Synchronizacja zako≈Ñczona")
                
                # 2. Restart
                if self.auto_restart:
                    print("üöÇ Restartujƒô Railway...")
                    restart_success = self.railway.restart_service()
                    
                    if restart_success:
                        print("‚úÖ Railway zrestartowany!")
                        return True
                    else:
                        print("‚ö†Ô∏è B≈ÇƒÖd restartu Railway")
                        return False
                else:
                    print("‚úÖ Synchronizacja zako≈Ñczona (bez restartu)")
                    return True
            else:
                print("‚ùå B≈ÇƒÖd synchronizacji")
                return False
                
        except Exception as e:
            print(f"‚ùå B≈ÇƒÖd rƒôcznej sync: {e}")
            return False

def start_smart_auto_sync():
    """Uruchamia inteligentny auto sync"""
    
    # Tokens
    GITHUB_TOKEN = "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"
    RAILWAY_TOKEN = "01cb5053-0fac-4ffe-9618-c7af6466902d"
    
    # ≈öcie≈ºka do warsztatu
    workshop_path = Path("/Users/maczek/Desktop/BOT/workshop/railway_deployment/hook_boost_railway")
    
    if not workshop_path.exists():
        print(f"‚ùå Warsztat nie istnieje: {workshop_path}")
        return
    
    # Inicjalizuj smart sync
    smart_sync = SmartAutoSync(GITHUB_TOKEN, RAILWAY_TOKEN)
    observer = Observer()
    observer.schedule(smart_sync, str(workshop_path), recursive=False)
    
    print(f"üëÅÔ∏è Rozpoczynam inteligentne monitorowanie: {workshop_path}")
    print("üîÑ Automatyczna synchronizacja + restart aktywny!")
    print("‚èπÔ∏è Naci≈õnij Ctrl+C aby zatrzymaƒá")
    print("\nüéØ KOMENDY:")
    print("- smart_sync.manual_sync_and_restart() - rƒôczna sync + restart")
    print("- smart_sync.manual_sync_and_restart('main.py') - sync konkretnego pliku")
    
    try:
        observer.start()
        
        # Dodaj smart_sync do global scope dla interaktywnego u≈ºycia
        globals()['smart_sync'] = smart_sync
        
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
        print("\n‚èπÔ∏è Smart Auto Sync zatrzymany")
    
    observer.join()

if __name__ == "__main__":
    start_smart_auto_sync() 