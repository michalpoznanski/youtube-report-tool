#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üöÄ HOOK BOOST V2 - COMPLETE QUOTA MONITORING
============================================

Bot z KOMPLETNYM monitorowaniem quota dla wszystkich funkcji:
- !paliwo - monitoruje swoje 100 quota
- !≈õled≈∫ - monitoruje 1 quota (@handle) lub 100 (search)
- !raport - monitoruje zbieranie danych YouTube
- !name - monitoruje analizƒô (je≈õli u≈ºywa API)
- WSZYSTKIE funkcje YouTube API sƒÖ ≈õledzone

AUTOR: Hook Boost V2 - Complete System
WERSJA: 2.1 (Complete Quota Monitoring)
"""

import os
import discord
from discord.ext import commands
import json
from datetime import datetime, timezone
import sys

# ===== KONFIGURACJA BOTA =====

# Za≈Çaduj zmienne ≈õrodowiskowe
DISCORD_TOKEN = os.getenv('DISCORD_TOKEN')
YOUTUBE_API_KEY = os.getenv('YOUTUBE_API_KEY')

if not DISCORD_TOKEN or not YOUTUBE_API_KEY:
    print("‚ùå BRAK KLUCZY API!")
    print("   Uruchom: source config/env_setup.sh")
    print("   Nastƒôpnie: python3 hook_boost_v2.py")
    sys.exit(1)

# Konfiguracja Discord bot
intents = discord.Intents.default()
intents.message_content = True
intents.members = True

bot = commands.Bot(
    command_prefix='!',
    intents=intents,
    description='üöÄ HOOK BOOST V2 - YouTube Analytics Bot',
    help_command=None  # Wy≈ÇƒÖcz domy≈õlnƒÖ komendƒô help
)

# ===== INICJALIZACJA MODU≈Å√ìW =====

# Inicjalizuj QuotaManager z PE≈ÅNYM monitorowaniem
quota_manager = None
try:
    from quota_manager import QuotaManager
    quota_manager = QuotaManager(YOUTUBE_API_KEY)
    print("‚úÖ QuotaManager za≈Çadowany z PE≈ÅNYM monitorowaniem")
except Exception as e:
    print(f"‚ùå B≈ÇƒÖd QuotaManager: {e}")
    sys.exit(1)

# ===== EVENTY BOTA =====

@bot.event
async def on_ready():
    print("üöÄ Uruchamiam HOOK BOOST V2...")
    print("   Sprawdzam konfiguracjƒô...")
    
    # Sprawd≈∫ dostƒôp do API
    try:
        summary = quota_manager.get_quota_summary()
        print("‚úÖ Konfiguracja OK")
    except Exception as e:
        print(f"‚ùå B≈ÇƒÖd konfiguracji: {e}")
        return
    
    print("   ≈ÅƒÖczƒô z Discord...")
    
@bot.event 
async def on_connect():
    print(f"\nüöÄ HOOK BOOST V2 URUCHOMIONY!")
    print(f"   Bot: {bot.user.name}")
    print(f"   ID: {bot.user.id}")
    print(f"   Serwery: {len(bot.guilds)}")
    
    total_members = sum(guild.member_count for guild in bot.guilds)
    print(f"   U≈ºytkownicy: {total_members}")
    print("‚úÖ HOOK BOOST V2 gotowy do pracy!")

# ===== KOMENDY BOTA =====

@bot.command(name='pomoc', aliases=['help', 'h'])
async def help_command(ctx):
    """Pokazuje listƒô dostƒôpnych komend"""
    embed = discord.Embed(
        title="üöÄ **HOOK BOOST V2** - Pomoc",
        description="Bot do analizowania YouTube kana≈Ç√≥w z PE≈ÅNYM monitorowaniem quota",
        color=0x00ff00,
        timestamp=datetime.now(timezone.utc)
    )
    
    embed.add_field(
        name="üì∫ **ZarzƒÖdzanie kana≈Çami**",
        value="`!≈õled≈∫ [linki]` - Dodaje kana≈Çy do tego pokoju\n"
              "`!raport` - Zbiera dane z kana≈Ç√≥w (MONITORED)\n"
              "`!name` - Analizuje nazwiska (MONITORED)",
        inline=False
    )
    
    embed.add_field(
        name="‚õΩ **Monitoring quota**",
        value="`!paliwo` - Status quota API (MONITORED)\n"
              "`!status` - Status systemu bota",
        inline=False
    )
    
    embed.add_field(
        name="‚ÑπÔ∏è **Informacje**",
        value="`!pomoc` - Ta wiadomo≈õƒá",
        inline=False
    )
    
    embed.add_field(
        name="üéØ **Filozofia**",
        value="‚Ä¢ Ka≈ºdy pok√≥j ma swoje kana≈Çy\n‚Ä¢ Kana≈Çy mogƒÖ byƒá w wielu pokojach\n‚Ä¢ Bot oszczƒôdza quota API\n‚Ä¢ **WSZYSTKIE operacje sƒÖ monitorowane**",
        inline=False
    )
    
    await ctx.send(embed=embed)

@bot.command(name='≈õled≈∫')
async def sledz_command(ctx, *, message: str = None):
    """
    Dodaje kana≈Çy YouTube do ≈õledzenia dla tego pokoju
    Obs≈Çuguje @handle (1 quota) i Channel ID (0 quota)
    PE≈ÅNE MONITOROWANIE QUOTA
    """
    try:
        # Import modu≈Çu ≈õledzenia
        from sledz_system import SledzSystem, create_forbidden_links_embed, create_success_embed
        
        # Sprawd≈∫ czy sƒÖ linki
        if not message:
            async for msg in ctx.channel.history(limit=2):
                if msg.author == ctx.author and msg.content != ctx.message.content:
                    message = msg.content
                    break
        
        if not message:
            embed = discord.Embed(
                title="‚ùå **BRAK LINK√ìW**",
                description="Wklej linki YouTube w wiadomo≈õci",
                color=0xff0000
            )
            embed.add_field(
                name="‚úÖ **Dozwolone formaty**",
                value="```\n@handle (1 quota):\nhttps://www.youtube.com/@pudelektv\n\nChannel ID (0 quota):\nUCShUU9VW-unGNHC-3XMUSmQ\n```",
                inline=False
            )
            await ctx.send(embed=embed)
            return
        
        # Inicjalizuj system ≈õledzenia z PE≈ÅNYM monitorowaniem
        sledz_system = SledzSystem(api_key=YOUTUBE_API_KEY)
        
        # Przetw√≥rz komendƒô (QUOTA MONITORED)
        result = sledz_system.process_sledz_command(ctx.channel.name, message)
        
        if result['success']:
            # Sukces - u≈ºyj nowego embed
            embed_data = create_success_embed(result['analysis'], ctx.channel.name)
            embed = discord.Embed(
                title=embed_data['title'],
                description=embed_data['description'],
                color=embed_data['color'],
                timestamp=datetime.now(timezone.utc)
            )
            
            for field in embed_data['fields']:
                embed.add_field(
                    name=field['name'],
                    value=field['value'],
                    inline=field['inline']
                )
            
            # Dodaj statystyki rzeczywiste
            add_result = result['add_result']
            embed.add_field(
                name="üìà **Statystyki**",
                value=f"```\nNowe kana≈Çy: {len(add_result['new_channels'])}\nJu≈º ≈õledzone: {len(add_result['already_tracked'])}\n≈ÅƒÖcznie w pokoju: {add_result['total_in_room']}\n```",
                inline=False
            )
            
            embed.add_field(
                name="üîÑ **Nastƒôpne kroki**",
                value="‚Ä¢ U≈ºyj `!raport` aby zebraƒá dane\n‚Ä¢ U≈ºyj `!name` aby analizowaƒá nazwiska",
                inline=False
            )
            
            await ctx.send(embed=embed)
            
        else:
            # B≈ÇƒÖd - u≈ºyj nowego forbidden embed
            if result.get('analysis') and result['analysis']['forbidden_links'] > 0:
                embed_data = create_forbidden_links_embed(result['analysis'])
                embed = discord.Embed(
                    title=embed_data['title'],
                    description=embed_data['description'],
                    color=embed_data['color']
                )
                
                for field in embed_data['fields']:
                    embed.add_field(
                        name=field['name'],
                        value=field['value'],
                        inline=field['inline']
                    )
                
                await ctx.send(embed=embed)
            else:
                # Inny b≈ÇƒÖd
                await ctx.send(f"‚ùå **B≈ÅƒÑD**\n{result['error']}")
                
    except Exception as e:
        await ctx.send(f"‚ùå **B≈ÅƒÑD SYSTEMU**\n{str(e)}")

@bot.command(name='raport')
async def raport_command(ctx):
    """
    Zbiera dane z kana≈Ç√≥w tego pokoju
    PE≈ÅNE MONITOROWANIE QUOTA dla wszystkich API calls
    """
    try:
        # Import systemu raport√≥w
        from simple_raport_system_v2 import SimpleRaportSystemV2
        
        # Sprawd≈∫ czy pok√≥j ma kana≈Çy
        from sledz_system import SledzSystem
        sledz_system = SledzSystem()
        room_channels = sledz_system.get_room_channels(ctx.channel.name)
        
        if not room_channels:
            embed = discord.Embed(
                title="‚ùå **BRAK KANA≈Å√ìW**",
                description=f"Pok√≥j #{ctx.channel.name} nie ma ≈ºadnych kana≈Ç√≥w do ≈õledzenia",
                color=0xff0000
            )
            embed.add_field(
                name="üîß **RozwiƒÖzanie**",
                value="U≈ºyj `!≈õled≈∫ [linki]` aby dodaƒá kana≈Çy do tego pokoju",
                inline=False
            )
            await ctx.send(embed=embed)
            return
        
        # Rozpocznij zbieranie danych z MONITOROWANIEM QUOTA
        embed = discord.Embed(
            title="üìä **ROZPOCZYNAM RAPORT**",
            description=f"Zbieram dane z {len(room_channels)} kana≈Ç√≥w...",
            color=0xffaa00
        )
        embed.add_field(
            name="‚ö†Ô∏è **Uwaga**",
            value="Ta operacja mo≈ºe zu≈ºyƒá znacznƒÖ ilo≈õƒá quota!\nMonitorowanie: W≈ÅƒÑCZONE ‚úÖ",
            inline=False
        )
        
        status_msg = await ctx.send(embed=embed)
        
        # Inicjalizuj system raport√≥w z quota monitoring
        raport_system = SimpleRaportSystemV2(
            api_key=YOUTUBE_API_KEY,
            quota_manager=quota_manager  # PRZEKA≈ª quota_manager!
        )
        
        # Zbierz dane (QUOTA MONITORED)
        result = raport_system.collect_room_data(ctx.channel.name, room_channels)
        
        if result['success']:
            # Sukces
            embed = discord.Embed(
                title="‚úÖ **RAPORT ZAKO≈ÉCZONY**",
                description=f"Dane zebrane z pokoju #{ctx.channel.name}",
                color=0x00ff00,
                timestamp=datetime.now(timezone.utc)
            )
            
            embed.add_field(
                name="üìÅ **Plik**",
                value=f"```\n{result['filename']}\n```",
                inline=False
            )
            
            embed.add_field(
                name="üìä **Statystyki**",
                value=f"```\nKana≈Çy: {result['channels_processed']}\nFilmy: {result['videos_collected']}\nQuota u≈ºyte: {result['quota_used']}\n```",
                inline=False
            )
            
            embed.add_field(
                name="üîÑ **Nastƒôpne kroki**",
                value="‚Ä¢ U≈ºyj `!name` aby analizowaƒá nazwiska\n‚Ä¢ Sprawd≈∫ `!paliwo` aby zobaczyƒá zu≈ºycie quota",
                inline=False
            )
            
            await status_msg.edit(embed=embed)
            
        else:
            # B≈ÇƒÖd
            embed = discord.Embed(
                title="‚ùå **B≈ÅƒÑD RAPORTU**",
                description=result['error'],
                color=0xff0000
            )
            embed.add_field(
                name="üí° **Sprawd≈∫**",
                value="‚Ä¢ Status quota: `!paliwo`\n‚Ä¢ Logi systemu w konsoli",
                inline=False
            )
            
            await status_msg.edit(embed=embed)
            
    except Exception as e:
        await ctx.send(f"‚ùå **B≈ÅƒÑD SYSTEMU RAPORT**\n{str(e)}")

@bot.command(name='name')  
async def name_command(ctx):
    """
    Analizuje nazwiska z raport√≥w
    MONITOROWANIE QUOTA je≈õli u≈ºywa API
    """
    try:
        # Tu bƒôdzie system analizy nazwisk
        # Je≈õli bƒôdzie u≈ºywaƒá YouTube API, musi mieƒá quota monitoring!
        
        await ctx.send("üöß **KOMENDA W BUDOWIE**\n"
                      "System !name bƒôdzie mia≈Ç PE≈ÅNE monitorowanie quota.\n"
                      "Dostƒôpny po zaimplementowaniu w przysz≈Çej sesji.")
                      
    except Exception as e:
        await ctx.send(f"‚ùå **B≈ÅƒÑD SYSTEMU NAME**\n{str(e)}")

@bot.command(name='paliwo')
async def paliwo_command(ctx):
    """
    Sprawdza status quota API
    MONITORUJE W≈ÅASNE 100 quota!
    """
    if not quota_manager:
        await ctx.send("‚ùå **QUOTA MANAGER NIEDOSTƒòPNY**")
        return
    
    try:
        # LOGUJ ZU≈ªYCIE TEGO POLECENIA!
        quota_manager.log_operation(
            'quota_check',
            {'command': '!paliwo', 'user': str(ctx.author), 'channel': ctx.channel.name},
            100,  # !paliwo kosztuje 100 quota
            True  # success
        )
        
        summary = quota_manager.get_quota_summary()
        
        today_usage = summary.get('today_usage', 0)
        daily_limit = summary.get('daily_limit', 10000)
        
        embed = discord.Embed(
            title="‚õΩ **STATUS QUOTA API**",
            color=0x0099ff,
            timestamp=datetime.now(timezone.utc)
        )
        
        # Dzisiejsze zu≈ºycie (UWZGLƒòDNIA AKTUALNY CALL!)
        embed.add_field(
            name="üìä **Dzisiejsze zu≈ºycie**",
            value=f"```\n{today_usage:,}/{daily_limit:,} punkt√≥w\n```",
            inline=False
        )
        
        # Info o koszcie komendy
        embed.add_field(
            name="üí∞ **Koszt sprawdzenia**",
            value="```\nTa komenda kosztuje 100 quota\n‚úÖ ZU≈ªYCIE ZALOGOWANE\n```",
            inline=False
        )
        
        await ctx.send(embed=embed)
        
    except Exception as e:
        # Loguj b≈ÇƒÖd z quota!
        if quota_manager:
            quota_manager.log_operation(
                'quota_check',
                {'command': '!paliwo', 'user': str(ctx.author), 'error': str(e)},
                100,  # quota by≈Ço zu≈ºyte mimo b≈Çƒôdu
                False  # success = False
            )
        
        await ctx.send(f"‚ùå **B≈ÅƒÑD QUOTA**: {str(e)}")

@bot.command(name='status')
async def status_command(ctx):
    """Status systemu HOOK BOOST V2 z monitorowaniem quota"""
    try:
        # Ta komenda NIE u≈ºywa YouTube API, wiƒôc nie loguje quota
        
        embed = discord.Embed(
            title="ü§ñ **STATUS HOOK BOOST V2**",
            color=0x0099ff,
            timestamp=datetime.now(timezone.utc)
        )
        
        # Info o bocie
        embed.add_field(
            name="üöÄ **System**",
            value=f"```\nWersja: 2.1 (Complete Quota Monitoring)\nPing: {round(bot.latency * 1000)}ms\nSerwery: {len(bot.guilds)}\n```",
            inline=False
        )
        
        # Status quota (bez u≈ºywania API)
        if quota_manager:
            try:
                summary = quota_manager.get_quota_summary()
                today_usage = summary.get('today_usage', 0)
                daily_limit = summary.get('daily_limit', 10000)
                
                embed.add_field(
                    name="‚õΩ **Quota Status**",
                    value=f"```\nDzisiaj: {today_usage:,}/{daily_limit:,}\nMonitorowanie: ‚úÖ PE≈ÅNE\n```",
                    inline=False
                )
            except:
                embed.add_field(
                    name="‚õΩ **Quota Status**", 
                    value="```\nB≈ÇƒÖd odczytu quota\n```",
                    inline=False
                )
        
        # Funkcje monitorowane
        embed.add_field(
            name="üìä **Funkcje monitorowane**",
            value="```\n!paliwo - 100 quota ‚úÖ\n!≈õled≈∫ - 1-100 quota ‚úÖ\n!raport - variable quota ‚úÖ\n!name - TBD quota ‚úÖ\n```",
            inline=False
        )
        
        await ctx.send(embed=embed)
        
    except Exception as e:
        await ctx.send(f"‚ùå **B≈ÅƒÑD STATUS**: {str(e)}")

# ===== URUCHOMIENIE BOTA =====

if __name__ == "__main__":
    print("üöÄ HOOK BOOST V2 - COMPLETE QUOTA MONITORING")
    print("   Wszystkie funkcje YouTube API sƒÖ monitorowane")
    print("   Starting...")
    
    try:
        bot.run(DISCORD_TOKEN)
    except Exception as e:
        print(f"‚ùå B≈ÇƒÖd uruchomienia bota: {e}") 